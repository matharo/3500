1. Tanmayi Nagasuri and Alex Lambrecht 

2. 
void adder(int r){
        int i;
        for(i = 0; i < 2000000; i++){
                r++;
        }
        printf("%d\n", r);
}

void subtractor(int r){
        int i;
        for(i = 0; i < 2000000; i++){
                r--;
        }
        printf("%d\n", r);
}

3. Nothing happened, they executed directly in the main. Race was first incremented and then decremented.

4. If they were executed in threads simultaneously then race could be incremented or decremented. 

5. 
456267
1628315
547303
-475088

6. Because the two threads are executing simultaneously, race is incremented and decremented at the same time, therefore giving different
values each time it is run. The max could be 2 million and the min would be -2 million. 

7. Even if the number of iterations is 1 million or 500000, the program behaves the same and outputs different values.
If the number of iterations is changed to 1000, then the program outputs 0 most times, and only sometimes other values, all less than 1000.

8. It should still be able to happen because the single processor will just make it slower.

9. The program executes but only outputs 0. 

10. The program either outputs 0 or a large number, but it takes longer. 

11. This is because the single processor does not execute the threads near simultaneously, therefore slowing the program down. 