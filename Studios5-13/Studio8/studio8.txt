1. Tanmayi Nagasuri and Alex Lambrecht

2. 
Sleeper's PID is: 3940
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!

3. 2 interrupt from keyboard

4. The process is terminated

5. SIGQUIT the process stopped
Quit (core dumped)

6. The caller and the sleeper are both terminated. The caller did not print
its success message.

7. 
void sig_handler(int signum){
        printf("Program is ignoring SIGINT\n");
}
signal(2, sig_handler);

8.
Forking sleeper...
Waiting for sleeper...
Sleeper's PID is: 26455
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!
^C
Program is ignoring SIGINT
Parent finished waiting and returned successfully!

9. Signal handling can be useful in a situation where a process needs to be stopped abruptly. For instance, a user might want to stop a plug in 
from executing in a web page and can stop just that specific plug in, not the whole website process. 